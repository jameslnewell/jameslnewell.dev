# TODO: lock down bucket access more securely

Description: Resources for the website

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
    Description: The environment to provision the resources in.

  HostedZoneId:
    Type: String
    Default: ''
    Description: The ID of the Route53 hosted zone.

  CanonicalDomain:
    Type: String
    Default: ''
    Description: The canonical domain which the site is accessed by.

  AlternateDomain:
    Type: String
    Default: ''
    Description: The alerternate domain which the site is accessed by.

  CertificateARN:
    Type: String
    Default: ''
    Description: The ARN of the certificate to use. Must be in ACM "us-east-1".

Conditions:
  HasCanonicalDomain: !Not [ !Equals [ !Ref CanonicalDomain, '' ] ]
  HasAlternateDomain: !Not [ !Equals [ !Ref AlternateDomain, '' ] ]
  HasCertificateARN: !Not [ !Equals [ !Ref CertificateARN, '' ] ]

Resources:

  CDNStorage:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !If [HasCanonicalDomain, !Ref CanonicalDomain, !Ref "AWS::NoValue"]

  CDNStoragePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CDNStorage
      PolicyDocument:
        Statement:
          - Sid: PrivateReadForGetBucketObjects
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CDNOriginAccessIdentity}"
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${CDNStorage.Arn}/*'

  CDNDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [CDNStorage, DomainName]
            Id: BucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginAccessIdentity}"
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !If [HasCanonicalDomain, !Ref CanonicalDomain, !Ref "AWS::NoValue"]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 180 # only  cache content for 3 minutes if there are no caching headers specified
          TargetOriginId: BucketOrigin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        ViewerCertificate: !If
          - HasCertificateARN
          - AcmCertificateArn: !Ref CertificateARN
            SslSupportMethod: sni-only
          - !Ref "AWS::NoValue"

  CDNOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity for the website.

  CDNDNSRecord:
    Condition: HasCanonicalDomain
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${CanonicalDomain}.'
      Type: A
      AliasTarget:
        DNSName: !GetAtt [CDNDistribution, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2 # @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid

  RedirectStorage:
    Type: AWS::S3::Bucket
    Condition: HasAlternateDomain
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref AlternateDomain
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          Protocol: https
          HostName: !Ref CanonicalDomain

  RedirectStoragePolicy:
    Type: AWS::S3::BucketPolicy
    Condition: HasAlternateDomain
    Properties:
      Bucket: !Ref RedirectStorage
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Principal: "*"
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${RedirectStorage.Arn}/*'

  RedirectDNSRecord:
    Condition: HasAlternateDomain
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${AlternateDomain}.'
      Type: A
      AliasTarget: # @see https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints
        DNSName: s3-website-ap-southeast-2.amazonaws.com
        HostedZoneId: Z1WCIGYICN2BYD

Outputs:
  BucketURL:
    Value: !GetAtt [CDNStorage, WebsiteURL]
    Description: The URL of the storage
  CDNURL:
    Value: !Sub 'https://${CDNDistribution.DomainName}/'
    Description: The URL of the CDN
